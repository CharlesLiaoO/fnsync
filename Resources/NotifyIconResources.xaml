<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:FnSync" xmlns:tb="http://www.hardcodet.net/taskbar">

    <!-- The taskbar context menu - the first row is a dummy to show off simple data binding -->
    <!--
        The "shared" directive is needed if we reopen the sample window a few times - WPF will otherwise
        reuse the same context menu (which is a resource) again (which will have its DataContext set to the old TaskbarIcon)
  -->
    <ContextMenu x:Shared="false" x:Key="SysTrayMenu">
        <!-- <MenuItem Header="Show Window" Command="{Binding ShowWindowCommand}" />
        <MenuItem Header="Hide Window" Command="{Binding HideWindowCommand}" />
        <Separator />
        -->
        <MenuItem x:Name="ConnectedPhonesTitle" IsEnabled="False" Header="{DynamicResource ConnectedPhones}"/>
        <MenuItem x:Name="ConnectedPhonesNone" IsEnabled="False" Header="{DynamicResource ConnectedPhonesNone}"/>
        <Separator x:Name="PhonesAbove"/>
        <MenuItem x:Name="ConnectOther" IsEnabled="True" Header="{DynamicResource ConnectOther}" Command="{Binding ConnectOtherCommand}" />
        <MenuItem IsEnabled="True" Header="{DynamicResource DeviceManager}" Command="{Binding DeviceManagerCommand}" />
        <MenuItem IsEnabled="True" Header="{DynamicResource FileManager}" Command="{Binding FileManagerCommand}" />
        <MenuItem IsEnabled="True" Header="{DynamicResource Setting}" Command="{Binding SettingCommand}" />
        <Separator />
        <MenuItem Header="{DynamicResource Instruction}" Command="{Binding InstructionCommand}"/>
        <Separator />
        <MenuItem Header="{DynamicResource Exit}" Command="{Binding ExitApplicationCommand}" />
    </ContextMenu>


    <!-- the application's NotifyIcon - started from App.xaml.cs. Declares its own view model. -->
    <tb:TaskbarIcon x:Key="NotifyIcon"
                    IconSource="icon.ico"
                    DoubleClickCommand="{Binding ShowWindowCommand}"
                    ContextMenu="{StaticResource SysTrayMenu}"
                    ToolTipText="{DynamicResource FnSyncTooltip}"
                    >

        <!-- self-assign a data context (could also be done programmatically) -->
        <tb:TaskbarIcon.DataContext>
            <local:NotifyIconViewModel />
        </tb:TaskbarIcon.DataContext>
    </tb:TaskbarIcon>
</ResourceDictionary>